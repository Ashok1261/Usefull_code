import os
import pandas as pd
from ast import literal_eval
from typing import Dict
from promptflow import tool
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction
from rouge_score import rouge_scorer
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from methods.ssrai_service import SSRAIService


def compute_metrics(gndth_ans: str, llm_answer: str) -> Dict[str, float]:
    smoothie = SmoothingFunction().method4
    bleu_score = sentence_bleu([gndth_ans.split()], llm_answer.split(), smoothing_function=smoothie)

    scorer = rouge_scorer.RougeScorer(['rougeL'], use_stemmer=True)
    rouge_scores = scorer.score(gndth_ans, llm_answer)
    rougeL_f1 = rouge_scores['rougeL'].fmeasure

    return {"BLEU": bleu_score, "ROUGE-L": rougeL_f1}


def question_typewise_accur(df: pd.DataFrame) -> pd.DataFrame:
    fil_lst = ['Conceptual', 'Reasoning-Based', 'Inferential', 'Factual', 'Procedural']
    fil_dic = {}
    for fil in fil_lst:
        fil_df = df[df["Question Type"] == fil]
        fil_dic[fil + "_cnt"] = fil_df['business_comparison_score'].count()
        fil_dic[fil + "_mean"] = round(fil_df['business_comparison_score'].mean(), 2)
    df.reset_index(inplace=True)
    df["type_wise_overall_bussiness"] = None
    df["type_wise_overall_bussiness"] = df["type_wise_overall_bussiness"].astype(object)
    df.at[0, "type_wise_overall_bussiness"] = fil_dic
    return df


def get_mean(df_acc: pd.DataFrame, cols: list) -> pd.DataFrame:
    for col in cols:
        try:
            df_acc["overall_" + col] = None
            df_acc.loc[0, "overall_" + col] = df_acc[col].mean()
        except Exception as e:
            print(f"Failed to create mean for {col}: {str(e)}")
    return df_acc


@tool
def compute_scores_for_df(
    csv_path: str,
    output_path: str,
    model_name: str,
    wrapper_name: str,
    llm_as_judge_prompt: str
) -> str:
    df = pd.read_csv(csv_path)
    formatted_output = []

    # Get LLM
    ssrai = SSRAIService(model_name=model_name, wrapper_name=wrapper_name)
    llm = ssrai.get_llm()

    prompt = PromptTemplate.from_template(llm_as_judge_prompt)
    llm_chain = LLMChain(llm=llm, prompt=prompt)

    for index, row in df.iterrows():
        input_data = f"""# {index}
## question: {row['Question']}
## ground_truth_answer: {row['Answer']}
## generated_answer: {row['finetuned_response']}"""

        try:
            result = llm_chain.predict(input_data=input_data)
            result_obj = literal_eval(result)

            # Add business comparison score
            business_score = round((result_obj['accuracy_score'] + result_obj['completeness_score']) / 2, 2)
            metrics = compute_metrics(row['Answer'], row['finetuned_response'])

            formatted_output.append({
                "business_comparison_score": business_score,
                **result_obj,
                **metrics
            })
        except Exception as e:
            formatted_output.append({
                "business_comparison_score": None,
                "accuracy_score": None,
                "accuracy_explanation": f"Error: {str(e)}",
                "completeness_score": None,
                "completeness_explanation": f"Error: {str(e)}"
            })

    df_scores = pd.DataFrame(formatted_output)
    df_final = pd.concat([df, df_scores], axis=1)

    df_final = question_typewise_accur(df_final)
    df_final = get_mean(df_final, ["business_comparison_score", "accuracy_score", "completeness_score"])

    df_final.to_excel(output_path, index=False)
    return output_path
