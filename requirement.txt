
import os
import io
import json
import zipfile
import logging
from fastapi import UploadFile

logger = logging.getLogger(__name__)

ALLOWED_COMPRESSIONS = ["application/zip", "application/x-zip-compressed"]

async def update_evaluation_strategy(self, strategy_id: str, name: str, description: str, strategyFile: UploadFile):
    strategy_config = None

    try:
        file_bytes = await strategyFile.read()

        # Validate file type
        if strategyFile.content_type not in ALLOWED_COMPRESSIONS:
            raise Exception("Only ZIP format is supported for strategy upload.")

        storage_path = get_strategy_storage_path(strategy_id=strategy_id, strategy_name=name or "strategy")

        with zipfile.ZipFile(io.BytesIO(file_bytes), mode="r") as zip_file:
            for member in zip_file.infolist():
                with zip_file.open(member) as file_data:
                    abs_path = os.path.join(storage_path, member.filename)

                    # Save the file to blob
                    self.blob_service.save_file(file_data=file_data, blob_absolute_path=abs_path)

                    file_data.seek(0)  # Reset pointer for reuse

                    # Load config JSON
                    if member.filename.endswith(".json") and "config" in member.filename.lower():
                        strategy_config = json.load(file_data)
                        logger.info(f"Loaded config from {member.filename}")

                    # Track CSV blob path
                    elif member.filename.endswith(".csv"):
                        strategy_config = strategy_config or {}
                        strategy_config["eval_strategy_blob_path"] = abs_path
                        logger.info(f"CSV path set in config: {abs_path}")

        if not strategy_config:
            raise Exception("No valid config JSON file found in the ZIP.")

        # Update the strategy in DB
        self.evaluation_dao.update_evaluation_strategy(
            strategy_id=strategy_id,
            name=name,
            description=description,
            config=strategy_config,
            modified_by=self.user_model.userId
        )

        # Fetch and return updated response
        strategy = self.evaluation_dao.get_evaluation_strategy_by_id(strategy_id)

        return EvaluationResponse(
            evalStrategyId=strategy.id,
            evalStrategyName=strategy.name,
            evalStrategydescription=strategy.description,
            evalstrategyConfig=EvalConfig(**strategy.config),
            createdBy=strategy.created_by,
            modifiedBy=strategy.modified_by,
            createdTs=strategy.created_ts,
            modifiedTs=strategy.modified_ts
        )

    except Exception as e:
        logger.error(f"Exception in updating evaluation strategy: {e}", exc_info=True)
        raise Exception(str(e))
