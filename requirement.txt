from fts_commons.models.evaluation_models import EvalConfig
from fts_mgmt.models.response_models import EvaluationResponse
import logging

logger = logging.getLogger(__name__)

async def get_all_evaluation_strategies(self, limit: int, offset: int):
    try:
        items, total = self.evaluation_dao.get_all_evaluation_strategies(limit, offset)

        if not items:
            raise Exception("No Evaluation Strategy records found.")

        response = {
            "items": [
                EvaluationResponse(
                    evalStrategyId=i.id,
                    evalStrategyName=i.name,
                    evalStrategydescription=i.description,
                    evalstrategyConfig=EvalConfig(**i.config) if i.config else {},
                    createdBy=i.created_by,
                    modifiedBy=i.modified_by,
                    createdTs=i.created_ts,
                    modifiedTs=i.modified_ts
                )
                for i in items
            ],
            "count": total,
            "limit": limit,
            "offset": offset
        }

        return response

    except Exception as e:
        logger.error(f"Exception in getting all evaluation strategies: {e}", exc_info=True)
        raise Exception(str(e))



dai.py

def get_all_evaluation_strategies(self, limit: int, offset: int):
    try:
        with DBSession() as db:
            query = db.session.query(EvaluationStrategies)
            total_count = query.count()
            strategies = query.offset(offset).limit(limit).all()
            return strategies, total_count
    except Exception as e:
        logger.error(f"Error fetching Evaluation Strategy list: {e}")
        raise Exception(str(e))



api.py
from fastapi import APIRouter, Query, Depends
from fts_commons.utils.authorization_service import get_login_info
from fts_commons.schema.user_model import UserModel
from fts_commons.utils.util import JsonResponse
from fts_mgmt.services.evaluation_strategy_mgmt_service import EvaluationStrategyService
from fts_mgmt.utils.errors import Errors
import logging

logger = logging.getLogger(__name__)
es_apis = APIRouter(tags=["Evaluation Strategy APIs"])

@es_apis.get("/strategies")
async def get_all_evaluation_strategies(
    limit: int = Query(10, description="Limit the number of results"),
    offset: int = Query(0, description="Offset for pagination"),
    userModel: UserModel = Depends(get_login_info)
):
    json_response = JsonResponse()

    try:
        data = await EvaluationStrategyService(userModel).get_all_evaluation_strategies(limit, offset)
        json_response.success = True
        json_response.result = data

    except Exception as e:
        error = Errors.E604.format(e=str(e))
        json_response.error = error
        logger.error(error, exc_info=True)

    return json_response.dict()

