
import pandas as pd
import io
from services.data_curation_service import DataCurationService  # Adjust this import
from services.blob_location import BlobLocation  # Adjust this import
from utils.enums import StorageObjectType  # Adjust this import

def save_questions_to_blob(df: pd.DataFrame, filename: str) -> str:
    """
    Save DataFrame to Azure Blob and return the saved file path (as string).
    """

    try:
        # Required columns check
        required_columns = ["Question Type", "Question", "Answer"]
        for col in required_columns:
            if col not in df.columns:
                df[col] = ""

        # Handle date formatting (only for Question/Answer if they're actually dates)
        for col in ["Question", "Answer"]:
            df[col] = pd.to_datetime(df[col], format="%Y%m%d", errors="coerce").dt.strftime("%m-%d-%Y").fillna(df[col])

        # Convert to CSV buffer
        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False)

        # Upload to Blob
        blob_path = BlobLocation(container_name="pvt-markets", absolute_path=filename)
        response = DataCurationService().upload_file_blob(
            data=csv_buffer.getvalue(),
            filename="evaluation_results.csv",
            blobFilePath=blob_path,
        )

        # âœ… Extract and return string message
        if isinstance(response, dict) and "storagePath" in response:
            storage_obj = response["storagePath"]
            if hasattr(storage_obj, "message"):
                return storage_obj.message  # Safe for JSON
            else:
                return str(storage_obj)
        return "Unknown blob path"

    except Exception as e:
        import logging
        logging.error(f"Error saving questions to blob: {e}", exc_info=True)
        return "Error"
