
import io
import pandas as pd
import logging

from services.data_curation_service import DataCurationService
from models.blob_location import BlobLocation

logger = logging.getLogger(__name__)

def save_questions_to_blob(questions_df: pd.DataFrame, filename: str) -> str:
    """
    Saves a DataFrame of questions to blob storage and returns the blob path as a string.
    """
    try:
        # Ensure required columns exist
        required_columns = ["Question Type", "Question", "Answer"]
        for col in required_columns:
            if col not in questions_df.columns:
                questions_df[col] = ""

        # Try to parse Question/Answer as date and format if possible
        for col in ["Question", "Answer"]:
            questions_df[col] = pd.to_datetime(questions_df[col], format="%Y%m%d", errors="coerce") \
                                        .dt.strftime("%m-%d-%Y").fillna(questions_df[col])

        # Save to CSV buffer
        csv_buffer = io.StringIO()
        questions_df.to_csv(csv_buffer, index=False)

        # Upload to blob
        blob_location = BlobLocation(container_name="pvt-markets", absolute_path=filename)

        upload_response = DataCurationService().upload_file_blob(
            data=csv_buffer.getvalue(),
            filename=filename.split("/")[-1],  # Extract only file name
            blobFilePath=blob_location
        )

        # Return the path as plain string
        return upload_response.get("storagePath", "")

    except Exception as e:
        logger.error(f"Error saving questions to blob: {e}", exc_info=True)
        return ""
