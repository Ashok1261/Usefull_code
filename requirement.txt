
# flow.dag.yaml for Promptflow Evaluation Strategy
name: evaluation-strategy-flow
description: Run evaluation using LLM-as-Judge component
entry: judge_component.evaluate
inputs:
  input_file: file
outputs:
  result: json

# judge_component.py for Promptflow
import pandas as pd
from judge.llm_as_judge import compute_sop_accuracy

def evaluate(input_file: str) -> dict:
    df = pd.read_csv(input_file)
    df_result = compute_sop_accuracy(
        df,
        qstn_col="Question",
        col_generated_ans="Generated_Answer",
        gndth_col="Answer"
    )
    return {"result": df_result.to_dict(orient="records")}

# requirements.txt
pandas
promptflow
openai

# sample_input.csv
Question,Generated_Answer,Answer
"What is the capital of France?","Paris","Paris"
"What is the currency of Japan?","Yen","Yen"

# run_evaluation.py (test script)
import sys
import pandas as pd
import json
from judge_component import evaluate

if __name__ == "__main__":
    input_file = sys.argv[1] if len(sys.argv) > 1 else "sample_input.csv"
    result = evaluate(input_file)
    print(json.dumps(result, indent=2))

# POST API logic to trigger evaluation (add to evaluation_strategy_mgmt_api.py)
@es_apis.post("/evaluation-strategy/{esId}/run-evaluation")
async def run_evaluation_strategy(esId: str, userModel: UserModel = Depends(get_login_info)):
    try:
        files, filenames = await EvaluationStrategyService(userModel).download_evaluation_strategy(esId)
        input_file = None
        for name, content in zip(filenames, files):
            if name.endswith(".csv") and "input" in name:
                file_path = f"/tmp/{name}"
                with open(file_path, "wb") as f:
                    f.write(content)
                    input_file = file_path
        if not input_file:
            raise HTTPException(status_code=404, detail="No input CSV file found in ZIP")

        from judge_component import evaluate
        result = evaluate(input_file)
        return {"success": True, "result": result["result"]}
    except Exception as e:
        error = Errors.E407.format(e=str(e), esId=esId)
        logger.error(error, exc_info=True)
        return JsonResponse(success=False, error=error).dict()
