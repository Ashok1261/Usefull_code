from ssrai_service import DataCurationService, BlobLocation
import pandas as pd
import io
import logging
from typing import Union

logger = logging.getLogger(__name__)


def save_evaluation_results_to_blob(
    df: pd.DataFrame, 
    filename: str = "evaluation_results.csv"
) -> str:
    """
    Saves the DataFrame to blob storage and returns only the path (string),
    avoiding non-serializable objects like StorageObj.
    """
    try:
        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False)

        # Upload using existing function
        response = DataCurationService().upload_file_blob(
            csv_buffer.getvalue(),
            filename=filename,
            blobFilePath=BlobLocation(
                container_name="pvt-markets",
                absolute_path=filename
            )
        )

        # Ensure we return only the string path (not the whole object)
        if isinstance(response, dict) and "storagePath" in response:
            return response["storagePath"]

        elif hasattr(response, "message") and isinstance(response.message, str):
            return response.message  # Fallback

        else:
            return filename  # Fallback to filename if nothing found

    except Exception as e:
        logger.error(f"Error saving evaluation results to blob: {e}", exc_info=True)
        return ""


# In your compute_scores_for_df or wherever you call this:
# --------------------------------------
# output_path = save_evaluation_results_to_blob(df_acc, filename=blob_path)
# return {
#     "outputDirectory": output_path,
#     "results": df_acc.to_dict(orient="records")
# }
# --------------------------------------

# Do NOT return any object like StorageObj or custom wrapper object in the final output
# because json.dumps() will raise TypeError unless it's a dict, list, str, int, float, or None.
