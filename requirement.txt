
from methods.load_file_blob_service import DataCurationService
from commons.blob_location import BlobLocation
import pandas as pd
import io
import os

def save_evaluation_results_to_blob(questions, filename="evaluation_results.csv") -> str:
    """Save valid questions and answers to blob and return the path"""

    try:
        df = pd.DataFrame(questions)

        # Ensure required columns exist
        required_columns = ["Question Type", "Question", "Answer"]
        for col in required_columns:
            if col not in df.columns:
                df[col] = ""

        # Format datetime columns safely
        for col in ["Question", "Answer"]:
            df[col] = pd.to_datetime(df[col], format="%Y%m%d", errors="coerce").dt.strftime("%m-%d-%Y").fillna(df[col])

        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False)

        # Build BlobLocation dynamically (you can set this path/container as per your convention)
        absolute_path = f"evaluations/{filename}"
        container_name = os.getenv("EVAL_RESULTS_CONTAINER", "ftsevalcontainer")  # fallback if env not set

        blob_location = BlobLocation(
            absolute_path=absolute_path,
            container_name=container_name
        )

        response = DataCurationService().upload_file_blob(
            csv_buffer.getvalue(),
            filename,
            blob_location
        )

        return response.get("storagePath", "")
    except Exception as e:
        logger.error(f"Error saving questions to blob: {e}", exc_info=True)
        return ""
