
# ----------------------------
# FILE: fts_mgmt/api/evaluation_strategy_mgmt_apis.py
# ----------------------------

from fastapi import APIRouter, UploadFile, File, Depends, HTTPException, Response
from fts.commons.schema.user_model import UserModel
from fts.commons.utils.authorization_service import get_login_info
from fts.commons.utils.util import JsonResponse
from fts_mgmt.services.evaluation_strategy_mgmt_service import EvaluationStrategyService
from fts_mgmt.utils.errors import Errors
import logging
from io import BytesIO
from zipfile import ZipFile

logger = logging.getLogger(__name__)
eval_strategy_apis = APIRouter(tags=["Evaluation Strategy Management APIs"])


@eval_strategy_apis.post("")
async def create_evaluation_strategy(
    name: str = File(...),
    description: str = File(None),
    strategyFile: UploadFile = File(...),
    userModel: UserModel = Depends(get_login_info)
):
    json_response = JsonResponse()
    try:
        result = await EvaluationStrategyService(userModel).create_evaluation_strategy(name, description, strategyFile)
        json_response.success = True
        json_response.result = result
    except Exception as e:
        error = Errors.E301.format(e=str(e))
        json_response.error = error
        logger.error(error, exc_info=True)
    return json_response.model_dump()


@eval_strategy_apis.get("/{strategyId}")
async def get_evaluation_strategy_by_id(strategyId: str, userModel: UserModel = Depends(get_login_info)):
    json_response = JsonResponse()
    try:
        data = await EvaluationStrategyService(userModel).get_evaluation_strategy_by_id(strategyId)
        json_response.success = True
        json_response.result = data
    except Exception as e:
        error = Errors.E303.format(e=str(e), strategyId=strategyId)
        json_response.error = error
        logger.error(error, exc_info=True)
    return json_response.model_dump()


@eval_strategy_apis.get("")
async def get_all_evaluation_strategies(
    userModel: UserModel = Depends(get_login_info)
):
    json_response = JsonResponse()
    try:
        data = await EvaluationStrategyService(userModel).get_all_evaluation_strategies()
        json_response.success = True
        json_response.result = data
    except Exception as e:
        error = Errors.E304.format(e=str(e))
        json_response.error = error
        logger.error(error, exc_info=True)
    return json_response.model_dump()


@eval_strategy_apis.delete("/{strategyId}")
async def delete_evaluation_strategy(strategyId: str, userModel: UserModel = Depends(get_login_info)):
    json_response = JsonResponse()
    try:
        data = await EvaluationStrategyService(userModel).delete_evaluation_strategy(strategyId)
        json_response.success = True
        json_response.result = data
    except Exception as e:
        error = Errors.E305.format(e=str(e), strategyId=strategyId)
        json_response.error = error
        logger.error(error, exc_info=True)
    return json_response.model_dump()


@eval_strategy_apis.get("/{strategyId}/download")
async def download_evaluation_strategy(strategyId: str, userModel: UserModel = Depends(get_login_info)):
    try:
        files, filenames = await EvaluationStrategyService(userModel).download_evaluation_strategy(strategyId)
        if not files:
            raise HTTPException(status_code=404, detail="No files found for the strategy")

        zip_buffer = BytesIO()
        with ZipFile(zip_buffer, "w") as zip_file:
            for content, filename in zip(files, filenames):
                if content:
                    zip_file.writestr(filename, content)

        return Response(
            content=zip_buffer.getvalue(),
            media_type="application/zip",
            headers={"Content-Disposition": f'attachment; filename="{strategyId}.zip"'}
        )
    except Exception as e:
        logger.error(f"Download error: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))

# ----------------------------
# FILE: fts_mgmt/services/evaluation_strategy_mgmt_service.py
# ----------------------------

import zipfile
import os
import io
import json
import logging
from fastapi import UploadFile
from fts_mgmt.dao.evaluation_strategy_mgmt_dao import EvaluationStrategyDAO
from common_svc.storage.blob_service import BlobService
from common_svc.storage.storage_config import BlobLocation
from fts.commons.utils.util import generate_unique_number, get_strategy_storage_path
from fts.commons.schema.user_model import UserModel

logger = logging.getLogger(__name__)

class EvaluationStrategyService:
    def __init__(self, userModel: UserModel):
        self.user_model = userModel
        self.dao = EvaluationStrategyDAO()
        self.blob_service = BlobService()

    async def create_evaluation_strategy(self, name: str, description: str, strategyFile: UploadFile):
        strategy_id = generate_unique_number()
        strategy_config = None
        file_bytes = strategyFile.file.read()
        storage_path = get_strategy_storage_path(strategy_id=strategy_id, strategy_name=name)

        with zipfile.ZipFile(io.BytesIO(file_bytes), mode="r") as zip_file:
            for member in zip_file.infolist():
                with zip_file.open(member) as file_data:
                    abs_path = os.path.join(storage_path, member.filename)
                    self.blob_service.save_file(file_data=file_data, blob_absolute_path=abs_path)
                    if member.filename.endswith(".json"):
                        file_data.seek(0)
                        strategy_config = json.load(file_data)

        if not strategy_config:
            raise Exception("No config JSON found in ZIP")

        self.dao.save_evaluation_strategy(strategy_id, name, description, strategy_config, self.user_model.userId)
        return {"strategyId": strategy_id, "name": name, "description": description}

    async def get_evaluation_strategy_by_id(self, strategy_id: str):
        return self.dao.get_evaluation_strategy_by_id(strategy_id)

    async def get_all_evaluation_strategies(self):
        return self.dao.get_all_evaluation_strategies()

    async def delete_evaluation_strategy(self, strategy_id: str):
        return self.dao.delete_evaluation_strategy(strategy_id)

    async def download_evaluation_strategy(self, strategy_id: str):
        data = self.dao.get_evaluation_strategy_by_id(strategy_id)
        blob_path = get_strategy_storage_path(data["strategyId"], data["name"])
        files = []
        filenames = []
        file_list = self.blob_service.list_files(blob_absolute_path=blob_path)
        for file in file_list.data:
            blob_location = BlobLocation(container_name="your-container", absolute_path=file)
            output = self.blob_service.load_file(blob_location=blob_location.dict())
            if output.data:
                files.append(output.data)
                filenames.append(os.path.basename(file))
        return files, filenames

# ----------------------------
# FILE: fts_mgmt/dao/evaluation_strategy_mgmt_dao.py
# ----------------------------

import logging
from common_svc.db.base import DBSession
from sqlalchemy import text

logger = logging.getLogger(__name__)

class EvaluationStrategyDAO:
    def save_evaluation_strategy(self, strategy_id: str, name: str, description: str, config: dict, created_by: str):
        try:
            with DBSession() as db:
                db.session.execute(text("""
                    INSERT INTO public.evaluation_strategies (
                        id, name, description, config, created_by
                    ) VALUES (
                        :id, :name, :description, :config::jsonb, :created_by
                    )
                """), {
                    "id": strategy_id,
                    "name": name,
                    "description": description,
                    "config": json.dumps(config),
                    "created_by": created_by
                })
                db.session.commit()
        except Exception as e:
            logger.error(f"DB insert error: {str(e)}")
            raise

    def get_evaluation_strategy_by_id(self, strategy_id: str):
        try:
            with DBSession() as db:
                result = db.session.execute(text("""
                    SELECT * FROM public.evaluation_strategies WHERE id = :strategy_id
                """), {"strategy_id": strategy_id})
                return dict(result.fetchone()._mapping)
        except Exception as e:
            logger.error(f"DB fetch error: {str(e)}")
            raise

    def get_all_evaluation_strategies(self):
        try:
            with DBSession() as db:
                result = db.session.execute(text("""
                    SELECT * FROM public.evaluation_strategies
                """))
                return [dict(row._mapping) for row in result.fetchall()]
        except Exception as e:
            logger.error(f"DB fetch error: {str(e)}")
            raise

    def delete_evaluation_strategy(self, strategy_id: str):
        try:
            with DBSession() as db:
                db.session.execute(text("""
                    DELETE FROM public.evaluation_strategies WHERE id = :strategy_id
                """), {"strategy_id": strategy_id})
                db.session.commit()
                return {"message": f"Deleted strategy {strategy_id} successfully."}
        except Exception as e:
            logger.error(f"DB delete error: {str(e)}")
            raise






# Usefull_code
Demo
                        
