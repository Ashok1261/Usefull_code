
def flatten_config(config: dict, parent_key: str = '', sep: str = '_') -> dict:
    """
    Recursively flattens a nested dictionary using underscore `_` notation.
    """
    flattened = {}
    for k, v in config.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            flattened.update(flatten_config(v, new_key, sep=sep))
        else:
            flattened[new_key] = v
    return flattened





def flatten_config(config: dict, parent_key: str = '', sep: str = '.') -> dict:
    """
    Recursively flattens a nested dictionary using dot notation for keys.

    Example:
        {"a": {"b": {"c": 1}}} â†’ {"a.b.c": 1}
    """
    items = {}
    for k, v in config.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            # Recurse into nested dictionaries
            items.update(flatten_config(v, new_key, sep=sep))
        else:
            items[new_key] = v
    return items
