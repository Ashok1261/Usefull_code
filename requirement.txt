
blob_path = evaluation_runtime_config_path(strategy_id)

# Get StorageObj or response dict
storage_result = save_evaluation_results_to_blob(df_acc, filename=blob_path)

# Extract string path from the object
if isinstance(storage_result, dict) and "storagePath" in storage_result:
    output_path = storage_result["storagePath"]
else:
    output_path = ""

print("The output path is ", output_path)

return {
    "outputDirectory": output_path,
    "results": df_acc.to_dict(orient='records')
}




def save_evaluation_results_to_blob(questions, filename="evaluation_results.csv") -> dict:
    try:
        df = pd.DataFrame(questions)

        required_columns = ["Question Type", "Question", "Answer"]
        for col in required_columns:
            if col not in df.columns:
                df[col] = ""

        for col in ["Question", "Answer"]:
            df[col] = pd.to_datetime(df[col], format="%Y%m%d", errors="coerce") \
                        .dt.strftime("%m-%d-%Y").fillna(df[col])

        csv_buffer = io.StringIO()
        df.to_csv(csv_buffer, index=False)

        return DataCurationService().upload_file_blob(
            data=csv_buffer.getvalue(),
            filename=filename,
            blobFilePath=BlobLocation(
                absolute_path=filename,
                container_name="pvt-markets"
            )
        )

    except Exception as e:
        logger.error(f"Error saving questions to blob: {e}", exc_info=True)
        return {}


