import logging
from fastapi import APIRouter, Depends

from fts_commons.utils.util import TaskTypeEnum, JsonResponse
from fts_commons.schema.user_model import UserModel
from fts_commons.utils.authorization_service import get_login_info
from fts_commons.utils.objects import TriggerTaskConfig
from fts_mgmt.services.task_mgmt_service import TaskMgmtService
from fts_mgmt.utils.errors import Errors
from common_svc.logger.log_util import configure_loggers

logger = logging.getLogger(__name__)
configure_loggers()

task = APIRouter(tags=["Trigger Task APIs"])

@task.post("")
async def create_task(
    taskType: TaskTypeEnum,
    trigger_config: TriggerTaskConfig,
    userModel: UserModel = Depends(get_login_info)
):
    json_response = JsonResponse()

    try:
        # Auto-population for TRIGGER_EVALUATION_METRICS
        if taskType == TaskTypeEnum.TRIGGER_EVALUATION_METRICS:
            if not trigger_config.ecsID:
                raise ValueError("ecsID is required for evaluation task.")
            if not trigger_config.EvalutionStrategyDynamicConfig:
                raise ValueError("EvalutionStrategyDynamicConfig is required for evaluation task.")

        response = await TaskMgmtService(userModel).create_task(
            task_type_enum=taskType,
            trigger_config=trigger_config
        )

        json_response.success = True
        json_response.result = response

    except Exception as e:
        error = Errors.E401.format(e=str(e))
        json_response.error = error
        logger.error(error, exc_info=True)

    return json_response.dict()

