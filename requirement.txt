# 

import os
import json
import pandas as pd
from ast import literal_eval
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction
from rouge_score import rouge_scorer
from promptflow import tool
from methods.ssrai_service import SSRAIService
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from .llm_as_judge_prompt import score_prompt_template

def compute_metrics(gndth_ans: str, llm_answer: str) -> dict:
    smoothie = SmoothingFunction().method4
    bleu_score = sentence_bleu([gndth_ans.split()], llm_answer.split(), smoothing_function=smoothie)
    scorer = rouge_scorer.RougeScorer(['rougeL'], use_stemmer=True)
    rouge_scores = scorer.score(gndth_ans, llm_answer)
    rougel_f1 = rouge_scores['rougeL'].fmeasure
    return {"BLEU": bleu_score, "ROUGE-L": rougel_f1}

def get_mean(df_acc, cols: list):
    for col in cols:
        try:
            df_acc[f"overall_{col}"] = None
            df_acc.loc[0, f"overall_{col}"] = df_acc[col].mean()
        except Exception as e:
            print(f"Failed to compute mean for {col}: {e}")
    return df_acc

def question_typewise_accur(df: pd.DataFrame) -> pd.DataFrame:
    fil_lst = ['Conceptual', 'Reasoning-Based', 'Inferential', 'Factual', 'Procedural']
    fil_dic = {}
    for fil in fil_lst:
        fil_df = df[df["Question Type"] == fil]
        fil_dic[f"{fil}_cnt"] = fil_df['business_comparison_score'].count()
        fil_dic[f"{fil}_mean"] = round(fil_df['business_comparison_score'].mean(), 2)
    df.reset_index(inplace=True)
    df["type_wise_overall_bussiness"] = None
    df["type_wise_overall_bussiness"] = df["type_wise_overall_bussiness"].astype(object)
    df.at[0, "type_wise_overall_bussiness"] = fil_dic
    return df

def llm_call(input_data: str, model_name: str, wrapper_name: str) -> dict:
    model_kwargs = {"response_format": {"type": "json_object"}}
    ssrai_service = SSRAIService(rai_model_name=model_name, rai_wrapper_name=wrapper_name, model_kwargs=model_kwargs)
    llm = ssrai_service.get_llm()
    prompt = PromptTemplate.from_template(score_prompt_template)
    llm_chain = LLMChain(llm=llm, prompt=prompt)
    try:
        llm_output = llm_chain.predict(input_data=input_data)
        output = literal_eval(llm_output)
        return output
    except Exception as e:
        print(f"LLM call failed: {e}")
        return {"results": [{"error": str(e)}]}

@tool
def compute_scores_for_df(csv_path: str, output_path: str, model_name: str, wrapper_name: str) -> str:
    df = pd.read_csv(csv_path)
    formatted_output = []
    for index, row in df.iterrows():
        input_data = f"""# {index}

## question: {row['Question']}

## ground_truth_answer: {row['Answer']}

## generated_answer: {row['finetuned_response']}"""
        try:
            result = llm_call(input_data=input_data, model_name=model_name, wrapper_name=wrapper_name)
            if result and 'results' in result:
                scores = result['results'][0]
                formatted_output.append({
                    "business_comparison_score": round((scores['accuracy_score'] + scores['completeness_score']) / 2, 2),
                    **scores
                })
            else:
                formatted_output.append({
                    "business_comparison_score": None,
                    "accuracy_score": None,
                    "accuracy_explanation": "LLM response missing",
                    "completeness_score": None,
                    "completeness_explanation": "LLM response missing"
                })
        except Exception as e:
            formatted_output.append({
                "business_comparison_score": None,
                "accuracy_score": None,
                "accuracy_explanation": f"Error: {str(e)}",
                "completeness_score": None,
                "completeness_explanation": f"Error: {str(e)}"
            })

    df_scores = pd.DataFrame(formatted_output)
    df_final = pd.concat([df, df_scores], axis=1)
    df_final = question_typewise_accur(df_final)
    df_final = get_mean(df_final, ["business_comparison_score", "accuracy_score", "completeness_score"])
    df_final.to_excel(output_path, index=False)
    return output_path

