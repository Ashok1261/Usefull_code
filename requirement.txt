ax1.set_ylim(0, 110)
ax1.set_yticklabels([f"{int(tick)}" for tick in ax1.get_yticks()], fontweight='bold', fontsize=12)





import matplotlib.pyplot as plt
import numpy as np

# Data
volumes = ['40K', '52K', '80K + 22K']
factual = [22, 22, 22]
conceptual = [18, 18, 18]
procedural = [0, 12, 12]
reasoning = [0, 0, 14]
inferential = [0, 0, 14]
accuracy = [48, 70, 79]

# Stack the question type data
data = np.array([factual, conceptual, procedural, reasoning, inferential])
x = np.arange(len(volumes))

# Plot setup
fig, ax1 = plt.subplots(figsize=(10, 6))

# Colors
colors = ['#1f77b4', '#e84393', '#2ca02c', '#d62728', '#9467bd']
labels = ['Factual', 'Conceptual', 'Procedural', 'Reasoning', 'Inferential']

# Stacked bar chart
bottom = np.zeros(len(volumes))
for i in range(len(data)):
    bars = ax1.bar(x, data[i], bottom=bottom, color=colors[i], label=labels[i])
    for j, bar in enumerate(bars):
        if data[i][j] > 0:
            ax1.text(
                bar.get_x() + bar.get_width() / 2,
                bottom[j] + data[i][j] / 2,
                f'{data[i][j]}K',
                ha='center',
                va='center',
                fontsize=10,
                fontweight='bold',
                color='white'
            )
    bottom += data[i]

# Accuracy line plot
ax1.plot(x, accuracy, color='black', marker='o', linewidth=2, label='Accuracy (%)')
for i, acc in enumerate(accuracy):
    ax1.text(x[i], acc + 2, f'{acc}%', ha='center', fontsize=11, fontweight='bold', color='black')

# Axis formatting
ax1.set_xticks(x)
ax1.set_xticklabels(volumes, fontsize=12, fontweight='bold')
ax1.set_ylabel("Accuracy (%)", fontsize=13, fontweight='bold')
ax1.set_xlabel("Data Volume", fontsize=13, fontweight='bold')
ax1.set_ylim(0, 110)
ax1.tick_params(axis='y', labelsize=12, labelcolor='black')
ax1.set_title("Question Distribution and Accuracy by Data Volume", fontsize=15, fontweight='bold')
ax1.grid(False)

# Custom legend
custom_labels = labels + ['Accuracy']
custom_colors = colors + ['black']
custom_handles = [plt.Line2D([0], [0], color=color, lw=10) for color in custom_colors]
plt.legend(custom_handles, custom_labels, loc='lower center', bbox_to_anchor=(0.5, -0.25), ncol=6, fontsize=10, frameon=False)

# Save the figure
plt.tight_layout()
plt.savefig("/mnt/data/final_question_accuracy_distribution.png", dpi=300, bbox_inches='tight')
plt.show()
