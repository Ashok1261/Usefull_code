# Full service methods including create, update, get_all for evaluation strategy
import io
import os
import zipfile
import json
from fastapi import UploadFile
from fts_commons.utils.util import generate_unique_number, get_strategy_storage_path
from fts_commons.utils.objects import EvaluationResponse, EvalConfig
from evaluation_strategy.dao.evaluation_strategy_mgmt_dao import EvaluationStrategyDAO
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

async def create_evaluation_strategy(self, name: str, description: str, strategyFile: UploadFile):
    strategy_id = generate_unique_number()
    strategy_config = None

    try:
        file_bytes = strategyFile.file.read()
        storage_path = get_strategy_storage_path(strategy_id=strategy_id, strategy_name=name)

        if strategyFile.content_type not in ALLOWED_COMPRESSIONS:
            raise Exception("Only ZIP format is supported for strategy upload.")

        with zipfile.ZipFile(io.BytesIO(file_bytes), mode="r") as zip_file:
            for member in zip_file.infolist():
                with zip_file.open(member) as file_data:
                    abs_path = os.path.join(storage_path, member.filename)
                    self.blob_service.save_file(file_data=file_data, blob_absolute_path=abs_path)

                    if member.filename.endswith(".json") and "config" in member.filename.lower():
                        file_data.seek(0)
                        strategy_config = json.load(file_data)

        if not strategy_config:
            raise Exception("No valid config JSON file found in the ZIP.")

        self.evaluation_dao.save_evaluation_strategy(
            strategy_id=strategy_id,
            name=name,
            description=description,
            config=strategy_config,
            created_by=self.user_model.userId
        )

        strategy = self.evaluation_dao.get_evaluation_strategy_by_id(strategy_id)

        return EvaluationResponse(
            strategyId=strategy.id,
            strategyName=strategy.name,
            description=strategy.description,
            strategyConfig=EvalConfig(**strategy.config),
            createdBy=strategy.created_by,
            modifiedBy=strategy.modified_by,
            createdTs=strategy.created_ts,
            modifiedTs=strategy.modified_ts
        )

    except Exception as e:
        logger.error(f"Exception in creating evaluation strategy: {e}", exc_info=True)
        raise Exception(str(e))


async def update_evaluation_strategy(self, strategy_id: str, name: str, description: str, strategyFile: UploadFile):
    strategy_config = None

    try:
        file_bytes = strategyFile.file.read()
        storage_path = get_strategy_storage_path(strategy_id=strategy_id, strategy_name=name or "strategy")

        if strategyFile.content_type not in ALLOWED_COMPRESSIONS:
            raise Exception("Only ZIP format is supported for strategy upload.")

        with zipfile.ZipFile(io.BytesIO(file_bytes), mode="r") as zip_file:
            for member in zip_file.infolist():
                with zip_file.open(member) as file_data:
                    abs_path = os.path.join(storage_path, member.filename)
                    self.blob_service.save_file(file_data=file_data, blob_absolute_path=abs_path)

                    if member.filename.endswith(".json") and "config" in member.filename.lower():
                        file_data.seek(0)
                        strategy_config = json.load(file_data)

        self.evaluation_dao.update_evaluation_strategy(
            strategy_id=strategy_id,
            name=name,
            description=description,
            config=strategy_config,
            modified_by=self.user_model.userId
        )

        strategy = self.evaluation_dao.get_evaluation_strategy_by_id(strategy_id)

        return EvaluationResponse(
            strategyId=strategy.id,
            strategyName=strategy.name,
            description=strategy.description,
            strategyConfig=EvalConfig(**strategy.config),
            createdBy=strategy.created_by,
            modifiedBy=strategy.modified_by,
            createdTs=strategy.created_ts,
            modifiedTs=strategy.modified_ts
        )

    except Exception as e:
        logger.error(f"Exception in updating evaluation strategy: {e}", exc_info=True)
        raise Exception(str(e))


async def get_all_evaluation_strategies(self, limit: int, offset: int):
    try:
        items, total = self.evaluation_dao.get_all_evaluation_strategies(limit, offset)

        response = {
            "items": [
                {
                    "strategyId": i.id,
                    "strategyName": i.name,
                    "description": i.description,
                    "strategyConfig": EvalConfig(**i.config),
                    "createdBy": i.created_by,
                    "modifiedBy": i.modified_by,
                    "createdTs": i.created_ts,
                    "modifiedTs": i.modified_ts
                }
                for i in items
            ],
            "count": total,
            "limit": limit,
            "offset": offset
        }

        return response

    except Exception as e:
        logger.error(f"Exception in getting all evaluation strategies: {e}", exc_info=True)
        raise Exception(str(e))
