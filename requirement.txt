from pydantic import BaseModel
from typing import Optional, Union, Dict
from datetime import datetime

class EvalConfig(BaseModel):
    threshold: Optional[float] = 0.8
    scoring_metric: Optional[str] = "exact_match"
    judge_mode: Optional[str] = "auto"
    extra_config: Optional[Dict] = {}

class EvaluationResponse(BaseModel):
    strategyId: str
    strategyName: str
    description: Union[str, None]
    strategyConfig: EvalConfig
    createdBy: str
    modifiedBy: str
    createdTs: datetime
    modifiedTs: datetime


from pydantic import BaseModel
from typing import Optional, Union, Dict
from datetime import datetime

class EvalConfig(BaseModel):
    threshold: Optional[float] = 0.8
    scoring_metric: Optional[str] = "exact_match"
    judge_mode: Optional[str] = "auto"
    extra_config: Optional[Dict] = {}

class EvaluationResponse(BaseModel):
    strategyId: str
    strategyName: str
    description: Union[str, None]
    strategyConfig: EvalConfig
    createdBy: str
    modifiedBy: str
    createdTs: datetime
    modifiedTs: datetime

