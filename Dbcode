import pandas as pd
from sqlalchemy import create_engine, text
import re

# === Step 1: Read your file ===
df = pd.read_csv('your_file.csv')  # or use pd.read_excel('your_file.xlsx')

# === Step 2: Database connection setup ===
username = ''
password = ''
host = ''
port = ''
database = ''
table_name = ''

db_url = f'postgresql://{username}:{password}@{host}:{port}/{database}'
engine = create_engine(db_url)

# === Step 3: Function to expand column ===
def expand_column(column_name, new_type="VARCHAR(1000)"):
    try:
        with engine.connect() as conn:
            stmt = text(f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" TYPE {new_type};')
            conn.execute(stmt)
            print(f"‚úÖ Expanded column: {column_name} to {new_type}")
    except Exception as e:
        print(f"‚ùå Failed to alter column {column_name}: {e}")

# === Step 4: Try inserting and handle length errors ===
def insert_with_auto_expand():
    try:
        df.to_sql(table_name, engine, if_exists='append', index=False)
        print("‚úÖ Data inserted successfully.")
    except Exception as e:
        msg = str(e)

        # Check if it's a string truncation error
        if "value too long for type character varying" in msg:
            # Try to extract column name
            match = re.search(r'column "([^"]+)"', msg)
            if match:
                column_name = match.group(1)
                print(f"‚ö†Ô∏è Column '{column_name}' caused length error. Attempting to expand...")
                expand_column(column_name)
                insert_with_auto_expand()  # üîÅ Retry recursively after fix
            else:
                print("‚ùå Could not identify the column name from the error.")
        else:
            print(f"‚ùå Other error: {e}")

# === Step 5: Execute ===
insert_with_auto_expand()
