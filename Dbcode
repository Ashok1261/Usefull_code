import pandas as pd
import psycopg2
from sqlalchemy import create_engine, inspect

# === Step 1: Load CSV File ===
file = r'C:\Users\yezarla.ashok\Downloads\your_file.csv'  # ‚úÖ Update this
df = pd.read_csv(file)

# === Step 2: Convert date columns ===
for col in df.columns:
    if 'date' in col.lower():
        try:
            df[col] = pd.to_datetime(df[col], errors='coerce', dayfirst=True)
            print(f"‚úÖ Converted column '{col}' to datetime format.")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning converting '{col}': {e}")

# === Step 3: Truncate long strings ===
max_length = 255
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].astype(str).str.slice(0, max_length)

# === Step 4: DB Connection Config ===
username = 'savant'
password = 'aiUoXDASqxUAffnA'
host = '34.70.19.116'
port = '5432'
database = 'savantdb'
table_name = 'IntroBrokerDealer'
primary_key_column = 'ibd_number'  # ‚úÖ Ensure this is a VARCHAR in DB

# === Step 5: Connect to DB ===
engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}')
conn = psycopg2.connect(host=host, port=port, dbname=database, user=username, password=password)
cursor = conn.cursor()
inspector = inspect(engine)
pg_columns = [col['name'] for col in inspector.get_columns(table_name)]

# === Step 6: Update Logic ===
updated_rows = 0

for _, row in df.iterrows():
    pk_value = row.get(primary_key_column)

    if pd.isnull(pk_value):
        print("‚ö†Ô∏è Skipping row with NULL PK.")
        continue

    # üîÅ Convert PK to string to match VARCHAR in DB
    pk_value = str(pk_value)

    update_fields = []
    values = []

    for col in df.columns:
        if col in pg_columns and col != primary_key_column:
            val = row[col]
            if pd.notnull(val):
                update_fields.append(f'"{col}" = %s')
                values.append(val)

    if update_fields:
        query = f'''
            UPDATE "{table_name}"
            SET {', '.join(update_fields)}
            WHERE "{primary_key_column}" = %s
        '''
        values.append(pk_value)  # PK last in VALUES list

        try:
            cursor.execute(query, values)
            updated_rows += 1
        except Exception as e:
            conn.rollback()
            print(f"‚ùå Failed to update row with {primary_key_column}={pk_value}: {e}")

# === Step 7: Commit and Close ===
conn.commit()
cursor.close()
conn.close()

print(f"\n‚úÖ Successfully updated {updated_rows} row(s).")
