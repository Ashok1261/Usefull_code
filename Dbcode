import pandas as pd
import psycopg2
from sqlalchemy import create_engine, inspect

# Step 1: Load CSV file
file = 'your_file.csv'  # üîÅ Change to your CSV path
df = pd.read_csv(file)

# Step 2: Convert all datetime-like columns (optional but safe)
for col in df.columns:
    if 'date' in col.lower():
        try:
            df[col] = pd.to_datetime(df[col], errors='coerce', dayfirst=True)
            print(f"‚úÖ Converted column '{col}' to datetime format.")
        except Exception as e:
            print(f"‚ö†Ô∏è Warning converting column '{col}': {e}")

# Step 3: Truncate long string fields
max_length = 255
for col in df.select_dtypes(include='object').columns:
    df[col] = df[col].astype(str).str.slice(0, max_length)

# Step 4: DB Connection config
username = ''
password = ''
host     = ''
port     = ''
database = ''
table_name = ''
primary_key_column = ''  # üîÅ Update as per your table

# Step 5: Connect to DB
engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}')
conn = psycopg2.connect(host=host, port=port, dbname=database, user=username, password=password)
cursor = conn.cursor()

# Step 6: Fetch actual column names from PostgreSQL
inspector = inspect(engine)
pg_columns = [col['name'] for col in inspector.get_columns(table_name)]

# Step 7: Update logic per row
updated_rows = 0
for _, row in df.iterrows():
    pk_value = row.get(primary_key_column)
    if pd.isnull(pk_value):
        continue  # skip rows without PK

    update_fields = []
    values = []

    for col in df.columns:
        if col in pg_columns and col != primary_key_column:
            val = row[col]
            if pd.notnull(val):
                update_fields.append(f'"{col}" = %s')
                values.append(val)

    if update_fields:
        query = f'''
            UPDATE "{table_name}"
            SET {', '.join(update_fields)}
            WHERE "{primary_key_column}" = %s
        '''
        values.append(pk_value)

        try:
            cursor.execute(query, values)
            updated_rows += 1
        except Exception as e:
            print(f"‚ùå Failed to update row with {primary_key_column}={pk_value}: {e}")

# Step 8: Commit and close
conn.commit()
cursor.close()
conn.close()

print(f"‚úÖ Successfully updated {updated_rows} row(s).")
