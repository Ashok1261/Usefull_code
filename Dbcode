import pandas as pd
from sqlalchemy import create_engine, text
import re

# === Step 1: Load CSV and fix date columns ===
file_path = 'C:/Users/yezarla.ashok/Desktop/coding/data.csv'  # üîÅ Update as needed
df = pd.read_csv(file_path)

# === Step 2: Fix date format columns ===
def fix_date_columns(df):
    for col in df.columns:
        if 'date' in col.lower():
            try:
                df[col] = pd.to_datetime(df[col], errors='coerce', dayfirst=True)
                print(f"üìÖ Converted column '{col}' to datetime format.")
            except Exception as e:
                print(f"‚ö†Ô∏è Failed to convert column '{col}' to datetime: {e}")
    return df

df = fix_date_columns(df)

# === Step 3: PostgreSQL connection ===
username = ''
password = ''
host = ''
port = ''
database = ''
table_name = ''

db_url = f'postgresql://{username}:{password}@{host}:{port}/{database}'
engine = create_engine(db_url)


# === Step 4: Expand a specific column dynamically ===
def expand_column(engine, table_name, column_name, new_type="VARCHAR(1000)"):
    try:
        with engine.connect() as conn:
            stmt = text(f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" TYPE {new_type};')
            conn.execute(stmt)
            print(f"‚úÖ Expanded column: {column_name} to {new_type}")
    except Exception as e:
        print(f"‚ùå Failed to alter column {column_name}: {e}")


# === Step 5: Insert with auto column expand retry ===
def insert_with_auto_expand():
    try:
        df.to_sql(table_name, engine, if_exists='append', index=False)
        print("‚úÖ Data inserted successfully.")
    except Exception as e:
        msg = str(e)

        # Check for string length truncation issue
        if "value too long for type character varying" in msg:
            match = re.search(r'column "([^"]+)"', msg)
            if match:
                column_name = match.group(1)
                print(f"‚ö†Ô∏è Column '{column_name}' caused length error. Expanding it...")
                expand_column(engine, table_name, column_name)
                insert_with_auto_expand()  # Retry after fix
            else:
                print("‚ùå Column name not found in error.")
        elif "DatetimeFieldOverflow" in msg:
            print("‚ùå Date field error! Please ensure all dates are valid and not out of range.")
        else:
            print(f"‚ùå Other error: {e}")


# === Step 6: Execute the process ===
insert_with_auto_expand()
